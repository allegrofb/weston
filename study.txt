1. weston(compositor server) -> desktop-shell.so(desktop shell plugin) -> weston-desktop-shell(desktop shell implementation)
   -- weston-desktop-shell ?? shell client, call by desktop-shell.so

2. desktop-shell.so
   -- weston-desktop-shell protocol
   -- xdg-shell protocol 


/*
 * Surface stacking and ordering.
 *
 * This is handled using several linked lists of surfaces, organised into
 * ‘layers’. The layers are ordered, and each of the surfaces in one layer are
 * above all of the surfaces in the layer below. The set of layers is static and
 * in the following order (top-most first):
 *  • Lock layer (only ever displayed on its own)
 *  • Cursor layer
 *  • Input panel layer
 *  • Fullscreen layer
 *  • Panel layer
 *  • Workspace layers
 *  • Background layer
 *
 * The list of layers may be manipulated to remove whole layers of surfaces from
 * display. For example, when locking the screen, all layers except the lock
 * layer are removed.
 *
 * A surface’s layer is modified on configuring the surface, in
 * set_surface_type() (which is only called when the surface’s type change is
 * _committed_). If a surface’s type changes (e.g. when making a window
 * fullscreen) its layer changes too.
 *
 * In order to allow popup and transient surfaces to be correctly stacked above
 * their parent surfaces, each surface tracks both its parent surface, and a
 * linked list of its children. When a surface’s layer is updated, so are the
 * layers of its children. Note that child surfaces are *not* the same as
 * subsurfaces — child/parent surfaces are purely for maintaining stacking
 * order.
 *
 * The children_link list of siblings of a surface (i.e. those surfaces which
 * have the same parent) only contains weston_surfaces which have a
 * shell_surface. Stacking is not implemented for non-shell_surface
 * weston_surfaces. This means that the following implication does *not* hold:
 *     (shsurf->parent != NULL) ⇒ !wl_list_is_empty(shsurf->children_link)
 */




2. wet_module_init
   wet_shell_init

3. C:\working\weston\weston.ini.in 
   -- default config file   

http://manpages.ubuntu.com/manpages/bionic/man5/weston.ini.5.html


SHELL SECTION

       client=file
              sets the path for the shell client to run. If not specified weston-desktop-shell is
              launched (string).



1. libweston-desktop library 	
   -- client should implement weston_desktop_api interafce
   -- weston_desktop_*



struct weston_desktop_api {
	size_t struct_size;
	void (*ping_timeout)(struct weston_desktop_client *client,
			     void *user_data);
	void (*pong)(struct weston_desktop_client *client,
		     void *user_data);

	void (*surface_added)(struct weston_desktop_surface *surface,
			      void *user_data);
	void (*surface_removed)(struct weston_desktop_surface *surface,
				void *user_data);
	void (*committed)(struct weston_desktop_surface *surface,
			  int32_t sx, int32_t sy, void *user_data);
	void (*show_window_menu)(struct weston_desktop_surface *surface,
				 struct weston_seat *seat, int32_t x, int32_t y,
				 void *user_data);
	void (*set_parent)(struct weston_desktop_surface *surface,
			   struct weston_desktop_surface *parent,
			   void *user_data);
	void (*move)(struct weston_desktop_surface *surface,
		     struct weston_seat *seat, uint32_t serial, void *user_data);
	void (*resize)(struct weston_desktop_surface *surface,
		       struct weston_seat *seat, uint32_t serial,
		       enum weston_desktop_surface_edge edges, void *user_data);
	void (*fullscreen_requested)(struct weston_desktop_surface *surface,
				     bool fullscreen,
				     struct weston_output *output,
				     void *user_data);
	void (*maximized_requested)(struct weston_desktop_surface *surface,
				    bool maximized, void *user_data);
	void (*minimized_requested)(struct weston_desktop_surface *surface,
				    void *user_data);

	/** Position suggestion for an Xwayland window
	 *
	 * X11 applications assume they can position their windows as necessary,
	 * which is not possible in Wayland where positioning is driven by the
	 * shell alone. This function is used to relay absolute position wishes
	 * from Xwayland clients to the shell.
	 *
	 * This is particularly used for mapping windows at specified locations,
	 * e.g. via the commonly used '-geometry' command line option. In such
	 * case, a call to surface_added() is immediately followed by
	 * xwayland_position() if the X11 application specified a position.
	 * The committed() call that will map the window occurs later, so it
	 * is recommended to usually store and honour the given position for
	 * windows that are not yet mapped.
	 *
	 * Calls to this function may happen also at other times.
	 *
	 * The given coordinates are in the X11 window system coordinate frame
	 * relative to the X11 root window. Care should be taken to ensure the
	 * window gets mapped to coordinates that correspond to the proposed
	 * position from the X11 client perspective.
	 *
	 * \param surface The surface in question.
	 * \param x The absolute X11 coordinate for x.
	 * \param y The absolute X11 coordinate for y.
	 * \param user_data The user_data argument passed in to
	 * weston_desktop_create().
	 *
	 * This callback can be NULL.
	 */
	void (*set_xwayland_position)(struct weston_desktop_surface *surface,
				      int32_t x, int32_t y, void *user_data);
};


weston_seat_break_desktop_grabs(struct weston_seat *seat);

weston_desktop_create(struct weston_compositor *compositor,
		      const struct weston_desktop_api *api, void *user_data);
weston_desktop_destroy(struct weston_desktop *desktop);

weston_desktop_client_get_client(struct weston_desktop_client *client);
weston_desktop_client_for_each_surface(struct weston_desktop_client *client,
				       void (*callback)(struct weston_desktop_surface *surface, void *user_data),
				       void *user_data);

weston_desktop_client_ping(struct weston_desktop_client *client);

weston_surface_is_desktop_surface(struct weston_surface *surface);
weston_surface_get_desktop_surface(struct weston_surface *surface);

weston_desktop_surface_set_user_data(struct weston_desktop_surface *self,
				     void *user_data);
weston_desktop_surface_create_view(struct weston_desktop_surface *surface);
weston_desktop_surface_unlink_view(struct weston_view *view);

weston_desktop_surface_propagate_layer(struct weston_desktop_surface *surface);

weston_desktop_surface_set_activated(struct weston_desktop_surface *surface,
				     bool activated);

weston_desktop_surface_set_fullscreen(struct weston_desktop_surface *surface,
				      bool fullscreen);

weston_desktop_surface_set_maximized(struct weston_desktop_surface *surface,
				     bool maximized);

weston_desktop_surface_set_resizing(struct weston_desktop_surface *surface,
				    bool resized);

weston_desktop_surface_set_size(struct weston_desktop_surface *surface,
				int32_t width, int32_t height);

weston_desktop_surface_close(struct weston_desktop_surface *surface);

weston_desktop_surface_add_metadata_listener(struct weston_desktop_surface *surface,
					     struct wl_listener *listener);

weston_desktop_surface_get_user_data(struct weston_desktop_surface *surface);
weston_desktop_surface_get_client(struct weston_desktop_surface *surface);
weston_desktop_surface_get_surface(struct weston_desktop_surface *surface);
weston_desktop_surface_get_title(struct weston_desktop_surface *surface);
weston_desktop_surface_get_app_id(struct weston_desktop_surface *surface);
weston_desktop_surface_get_pid(struct weston_desktop_surface *surface);
weston_desktop_surface_get_activated(struct weston_desktop_surface *surface);
weston_desktop_surface_get_maximized(struct weston_desktop_surface *surface);
weston_desktop_surface_get_fullscreen(struct weston_desktop_surface *surface);
weston_desktop_surface_get_resizing(struct weston_desktop_surface *surface);
weston_desktop_surface_get_geometry(struct weston_desktop_surface *surface);
weston_desktop_surface_get_max_size(struct weston_desktop_surface *surface);
weston_desktop_surface_get_min_size(struct weston_desktop_surface *surface);



2. libweston library
   -- weston_*





